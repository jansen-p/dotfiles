# Configuration file for libinput-gestures.
#
# The default configuration file exists at /etc/libinput-gestures.conf
# but a user can create a personal custom configuration file at
# ~/.config/libinput-gestures.conf.
#
# Lines starting with '#' and blank lines are ignored. Currently
# "gesture" and "device" configuration keywords are supported as
# described below. The keyword can optionally be appended with a ":" (to
# maintain compatibility with original format configuration files).
#
# Each gesture line has 3 [or 4] arguments:
#
# action motion [finger_count] command
#
# where action and motion is either:
#     swipe up
#     swipe down
#     swipe left
#     swipe right
#     pinch in
#     pinch out
#
# command is the remainder of the line and is any valid shell command +
# arguments.
#
# finger_count is a single numeric digit and is optional (and is
# typically 3 or 4). If specified then the command is executed when
# exactly that number of fingers is used in the gesture. If not
# specified then the command is executed when that gesture is executed
# with any number of fingers. Gesture lines specified with finger_count
# have priority over the same gesture specified without any
# finger_count.
#
# Typically command will be ydotool, or wmctrl. See "man ydotool" for
# the many things you can action with that tool. Note that unfortunately
# ydotool does not work with native Wayland clients.

###############################################################################
# SWIPE GESTURES:
###############################################################################

# Note the default is an "internal" command that uses wmctrl to switch
# workspaces and, unlike ydotool, work	s on both Xorg and Wayland (via
# XWayland). It also can be configured for vertical and horizontal
# switching over tabular workspaces, as per the example below. You can
# also add "-w" to the internal command to allow wrapping workspaces.

# Move to next workspace (works for GNOME/KDE/etc on Wayland and Xorg)
gesture swipe up 4 xdotool key alt+shift+e
gesture swipe up 3 xdotool key alt+shift+t
# gesture swipe up	ydotool key super+Page_Down

# Move to prev workspace (works for GNOME/KDE/etc on Wayland and Xorg)
gesture swipe down 4 xdotool key alt+shift+q
#gesture swipe down 3 ydotool key alt+shift+space
gesture swipe down 3 xdotool key alt+f
# gesture swipe down	ydotool key super+Page_Up

# Browser go forward (works only for Xorg, and Xwayland clients)CH GESTURES:
###############################################################################

# GNOME SHELL open/close overview (works for GNOME on Xorg only)
gesture pinch in xdotool key ctrl+minus
gesture pinch out xdotool key ctrl+plus

# GNOME SHELL open/close overview (works for GNOME on Wayland and Xorg)
# Note since GNOME 3.24 on Wayland this is implemented natively so no
# real point configuring for Wayland.
# gesture pinch in dbus-send --session --type=method_call --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'Main.overview.toggle();'
# gesture pinch out dbus-send --session --type=method_call --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'Main.overview.toggle();'

# Optional extended pinch gestures:
# gesture pinch clockwise <whatever command>
#
#gesture swipe left 4 ydotool key alt+x
gesture swipe left 4 i3-workspace-groups workspace-next
#gesture swipe left 3 ydotool key alt+shift+j
gesture swipe left 3 xdotool key alt+odiaeresis

# Browser go back (works only for Xorg, and Xwayland clients)
gesture swipe right	4 i3-workspace-groups workspace-prev
#gesture swipe right	4 ydotool key alt+y
#gesture swipe right 3 ydotool key alt+shift+odiaeresis
gesture swipe right 3 xdotool key alt+j

# NOTE: If you don't use "natural" scrolling direction for your touchpad
# then you may want to swap the above default left/right and up/down
# configurations.

# Optional extended swipe gestures, e.g. for browser tab navigation:
#
# Jump to next open browser tab
# gesture swipe right_up ydotool key control+Tab
#
# Jump to previous open browser tab
# gesture swipe left_up ydotool key control+shift+Tab
#
# Close current browser tab
# gesture swipe left_down ydotool key control+w
#
# Reopen and jump to last closed browser tab
# gesture swipe right_down ydotool key control+shift+t

##############################################################################
# PINCH GESTURES:
###############################################################################

# GNOME SHELL open/close overview (works for GNOME on Xorg only)
#gesture pinch in	ydotool key alt+tab+q
#gesture pinch out	ydotool key super+s

# GNOME SHELL open/close overview (works for GNOME on Wayland and Xorg)
# Note since GNOME 3.24 on Wayland this is implemented natively so no
# real point configuring for Wayland.
# gesture pinch in dbus-send --session --type=method_call --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'Main.overview.toggle();'
# gesture pinch out dbus-send --session --type=method_call --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'Main.overview.toggle();'
## Optional extended pinch gestures
# gesture pinch clockwise <whatever command>
# gesture pinch anticlockwise <whatever command>

# This application normally determines your touchpad device
# automatically. Some users may have multiple touchpads but by default
# we use only the first one found. However, you can choose to specify
# the explicit device name to use. Run "libinput list-devices" to work
# out the name of your device (from the "Device:" field). Then add a
# device line specifying that name, e.g:
#
# device DLL0665:01 06CB:76AD Touchpad
#
# If the device name starts with a '/' then it is instead considered as
# the explicit device path although since device paths can change
# through reboots this is best to be a symlink. E.g. instead of specifying
# /dev/input/event12, use the corresponding full path link under
# /dev/input/by-path/*.
#
# You can choose to use ALL touchpad devices by setting the device name
# to "all". E.g. Do this if you have multiple touchpads which you want
# to use in parallel. This reduces performance slightly so only set this
# if you have to.
#
# device all

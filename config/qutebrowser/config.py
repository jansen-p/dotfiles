# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {'w': 'session-save', 'q': 'quit', 'wq': 'quit --save'}

# Directory to save downloads to. If unset, a sensible OS-specific
# default is used.
# Type: Directory
c.downloads.location.directory = '~/Downloads/qute'

# Prompt the user for the download location. If set to false,
# `downloads.location.directory` will be used.
# Type: Bool
c.downloads.location.prompt = False

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['vim', '-f', '{file}', '-c', 'normal {line}G{column0}l']

# Characters used for hint strings.
# Type: UniqueCharString
c.hints.chars = 'asdfjklö'

# Enable smooth scrolling for web pages. Note smooth scrolling does not
# work with the `:scroll-px` command.
# Type: Bool
c.scrolling.smooth = True

# Hide the statusbar unless a message is shown.
# Type: Bool
c.statusbar.hide = True

# Position of the status bar.
# Type: VerticalPosition
# Valid values:
#   - top
#   - bottom
c.statusbar.position = 'bottom'

# Position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = 'top'

# When to show the tab bar.
# Type: String
# Valid values:
#   - always: Always show the tab bar.
#   - never: Always hide the tab bar.
#   - multiple: Hide the tab bar if only one tab is open.
#   - switching: Show the tab bar when switching tabs.
c.tabs.show = 'switching'

# Duration (in milliseconds) to show the tab bar before hiding it when
# tabs.show is set to 'switching'.
# Type: Int
c.tabs.show_switching_delay = 1000

# Open a new window for every tab.
# Type: Bool
c.tabs.tabs_are_windows = False

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'about:blank'

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://duckduckgo.com/?q={}', 'aw': 'https://wiki.archlinux.org/?search={}', 'g': 'https://www.google.com/search?hl=en&q={}', 'wi': 'https://de.wikipedia.org/w/index.php?search={}', 'ama': 'https://www.amazon.de/s?k={}', 'yt': 'https://www.youtube.com/results?search_query={}', 'aur': 'https://aur.archlinux.org/packages/?0&K={}'}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'https://duckduckgo.com'

# Default zoom level.
# Type: Perc
c.zoom.default = '115%'

# Font color for the matched part of hints.
# Type: QssColor
c.colors.hints.match.fg = 'darkgreen'

# Background color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.bg = 'darkgreen'

# Default monospace fonts. Whenever "monospace" is used in a font
# setting, it's replaced with the fonts listed here.
# Type: Font
c.fonts.monospace = '"xos4 Terminus", Terminus, Monospace, "DejaVu Sans Mono", Monaco, "Bitstream Vera Sans Mono", "Andale Mono", "Courier New", Courier, "Liberation Mono", monospace, Fixed, Consolas, Terminal'

# Font used in the completion widget.
# Type: Font
c.fonts.completion.entry = '8pt "DejaVu Sans Mono"'

# Font used in the completion categories.
# Type: Font
c.fonts.completion.category = 'bold 8pt monospace'

# Font used for the debugging console.
# Type: QtFont
c.fonts.debug_console = '8pt "DejaVu Sans Mono"'

# Font used for the downloadbar.
# Type: Font
c.fonts.downloads = '8pt "DejaVu Sans Mono"'

# Font used for the hints.
# Type: Font
c.fonts.hints = 'bold 10pt "DejaVu Sans Mono"'

# Font used in the keyhint widget.
# Type: Font
c.fonts.keyhint = '8pt "DejaVu Sans Mono"'

# Font used for error messages.
# Type: Font
c.fonts.messages.error = '8pt "DejaVu Sans Mono"'

# Font used for info messages.
# Type: Font
c.fonts.messages.info = '8pt "DejaVu Sans Mono"'

# Font used for warning messages.
# Type: Font
c.fonts.messages.warning = '8pt "DejaVu Sans Mono"'

# Font used for prompts.
# Type: Font
c.fonts.prompts = '8pt "DejaVu Sans Mono"'

# Font used in the statusbar.
# Type: Font
c.fonts.statusbar = '8pt "DejaVu Sans Mono"'

# Font used in the tab bar.
# Type: QtFont
c.fonts.tabs = 'bold 10pt "DejaVu Sans Mono"'

# Font family for standard fonts.
# Type: FontFamily
c.fonts.web.family.standard = None

# This setting can be used to map keys to other keys. When the key used
# as dictionary-key is pressed, the binding for the key used as
# dictionary-value is invoked instead. This is useful for global
# remappings of keys, for example to map Ctrl-[ to Escape. Note that
# when a key is bound (via `bindings.default` or `bindings.commands`),
# the mapping is ignored.
# Type: Dict
c.bindings.key_mappings = {'<Ctrl-[>': '<Escape>', '<Ctrl-6>': '<Ctrl-^>', '<Ctrl-M>': '<Return>', '<Ctrl-J>': '<Return>', '<Shift-Return>': '<Return>', '<Enter>': '<Return>', '<Shift-Enter>': '<Return>', '<Ctrl-Enter>': '<Ctrl-Return>'}

c.qt.args = ['ppapi-widevine-path=/usr/lib/qt/plugins/ppapi/libwidevinecdmadapter.so']

# Bindings for normal mode
config.bind(';h', 'hint links spawn streamlink -p mpv {hint-url} best')
config.bind(';j', 'hint links spawn mpv {hint-url}')
config.bind('sd', 'spawn --userscript ~/.config/qutebrowser/scripts/dict.sh')
config.bind('<ctrl+k>', 'scroll-px 0 350')
config.bind('<ctrl+l>', 'scroll-px 0 -350')
config.bind('D', None)
config.bind('J', 'tab-prev')
config.bind('K', 'scroll left')
config.bind('L', 'scroll right')
config.bind('M', 'jump-mark')
config.bind('ad', None)
config.bind('afd', 'hint links spawn evince')
config.bind('cc', 'tab-close')
config.bind('ch', 'history-clear')
config.bind('co', 'tab-only')
config.bind('cs', 'config-source')
config.bind('cw', 'config-write-py --force')
config.bind('d', None)
config.bind('dca', 'download-cancel')
config.bind('dcl', 'download-clear')
config.bind('dd', 'hint links download')
config.bind('do', 'spawn --userscript ~/.config/qutebrowser/scripts/open_download')
config.bind('dr', 'download-retry')
config.bind('du', 'download')
config.bind('e', 'open-editor')
config.bind('j', 'back')
config.bind('k', 'scroll down')
config.bind('l', 'scroll up')
config.bind('m', 'set-mark')
config.bind('q', None)
config.bind('qa', 'quickmark-add')
config.bind('qd', 'quickmark-del')
config.bind('ql', 'set-cmd-text -s :quickmark-load')
config.bind('qs', 'quickmark-save')
config.bind('t', ':open -t')
config.bind('Ö', 'tab-next')
config.bind('ö', 'forward')
config.bind(',p', 'spawn --userscript qute-pass --dmenu-invocation dmenu')
config.bind(',P', 'spawn --userscript qute-pass --dmenu-invocation dmenu --password-only')

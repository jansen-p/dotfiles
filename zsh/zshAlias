source ~/.zshenv

#Alias stuff
#navigation
alias c='clear'
alias ..='cd ..'
#alias ls='ls --group-directories-first --time-style=+"%d.%m.%Y %H:%M" --color=auto -F'
alias ls='exa --icons'
#alias lsl='ls -lash --group-directories-first --time-style=+"%d.%m.%Y %H:%M" --color=auto -F'
alias lsl='exa -lah'
alias du='dust'
alias cp='cp -i'
alias free='free -m'
alias grep='grep --color=auto'
alias mkdir='mkdir -pv'
alias uni="cd $NAS/uni/Studium/"
alias tex='vim ~/.vim/bundle/quicktex/ftplugin/tex.vim'
alias rme='vim ~/.dotfiles/docs/readme'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias sp='~/.bin/searchMultiplePDF.sh '

#fixes
alias mfix='alsactl restore'  #musikfix
alias kfix='setxkbmap -option caps:swapescape' #keyfix
alias bfix='sudo cp -r ~/.dotfiles/root/i3blocks /usr/lib'

#mount stuff
alias umnt=~/.dotfiles/scripts/mounts/unmount.sh
alias mnt=~/.dotfiles/scripts/mounts/mount.sh
alias mntl=~/.dotfiles/scripts/mounts/unlock.sh
alias mntll=~/.dotfiles/scripts/mounts/lock.sh
alias tfix='libinput-gestures-setup restart'

#utils
alias clr='for i in {0..255}; do print -Pn "%K{$i} %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done'
alias c='xclip'
alias v='xclip -o'
alias vimtex='vim --servername LATEX $*'
alias src='source ~/.zshrc'
alias portmod='sudo chmod 666 /dev/ttyUSB0'
alias inet='~/.i3/scripts/inet.sh'
alias specs='inxi -Fx'
alias df='df -h'
alias pow='sudo powertop'
alias listen="lsof -P -i -n"
alias ipinfo="curl ifconfig.me && curl ifconfig.me/host"
alias cmount="mount | column -t"
alias pid='ps aux | grep'
alias busy='cat /dev/urandom | hexdump -C | grep "ca fe"'
alias sf='screenfetch'
alias trash='gio list trash://'
alias trashclear='gio trash --empty'
alias pyt='python3.7'
alias aliasconf='vim ~/.dotfiles/zsh/zshAlias'
alias temp='/opt/vs/bin/vsgencmd measure_temp'
alias tmp='/opt/vs/bin/vcgencmd measure_temp'
alias vis='sh /run/Parts/Exch/Sync/swap/VisUAL/VisUAL.sh'
#alias vi='vim'
#alias vim='nvim'
alias jup='~/.bin/jupVim.sh'
alias rsensors='/opt/vc/bin/vcgencmd measure_temp'
alias pipu='pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U'
alias disp='export DISPLAY=:0'
alias r='ranger'

#configs
alias qutecon='vim ~/.config/qutebrowser/config.py'
alias termcon='vim ~/.config/termite/config'
alias rancon='vim ~/.config/ranger/rc.conf'
alias i3con='vim ~/.i3/config'
alias swaycon='vim ~/.sway/config'
alias hg='history | grep'

#network
alias myip=~/.i3/scripts/myip.sh
alias ping='ping -c 5'
alias port='netstat -tulanp'
alias netstart='sudo systemctl start NetworkManager'
alias netstop='sudo systemctl stop NetworkManager'

#git
alias gs='git status'
alias gl='git log'
alias gd='git diff'
alias gcm='git commit -m'
alias gca='git commit -am'
alias gaa='git add .'
alias ga='git add'
alias grh='git reset --hard HEAD^'
alias gcb='git checkout -b'
alias gco='git checkout'
alias gp='git push'
alias gg='git pull'
alias gf='git fetch'
alias gme='git merge'
alias gre='git rebase'
alias gits='alias | grep git'

#ros
#alias rossrc='source devel/setup.zsh'
alias rossrc='source /opt/ros/melodic/setup.zsh && source devel/setup.zsh'

#========================================================================================
#navigation stuff
alias ush='u -sh'
alias us='u -s'
alias up='u -p'
alias ua='u -a'

#tree
ut(){
	if [[ -z "$1" ]]
	then
		tree -d $(cat ~/.location)
	else
		tree -d -L $1 $(cat ~/.location)
	fi
}
#list locations
ul(){
	echo "Currently supported locations:\n"
	echo "list" | python3 ~/.bin/fuzzy/dic.py
}
un(){
	if [ -z "$1" ]
	then
		echo "No new location given!"
	else
		echo $1 | python3 ~/.bin/fuzzy/dic.py > ~/.location
		echo "New location set:"
		cat ~/.location
		echo

		if [ "" != "$2" ]
		then
			callNavigate $2
		fi
	fi
}


#rest of the tools
u(){
	if [[ $1 = "-i" ]];
	then
		echo "Current directory:"
		cat ~/.location
		echo -ne "\nThis will initialize/overwrite the history for this dir. Continue? (y/n)\n"; read answer
		echo
		if [[ $answer = "y" ]];
		then
			callNavigate $1
		fi
	elif [[ $1 = "-r" ]]; #remove dictionary file
	then
		echo -ne "\nThis will remove the history for this dir. Continue? (y/n)\n"; read answer
		echo
		if [[ $answer = "y" ]];
		then
			res=$(python3 ~/.bin/fuzzy/navigate.py $1)
			count=$(echo $res | grep " " | wc -l) #counts spaces
			if [[ $count -eq "0" ]]; #correct path
			then
				rm ~/.bin/fuzzy/.navi_hist/$res
				echo "Deleted dictionary!"
			else
				echo "No dictionary file found."
			fi
		fi
	else
		callNavigate $1 $2 $3
	fi
}
callNavigate(){
	res=$(python3 ~/.bin/fuzzy/navigate.py $1 $2 $3)
	count=$(echo $res | grep " " | wc -l) #counts spaces
	if [[ $count -eq "0" ]]; #correct path
	then
		cd $res
	else
		echo $res
	fi
}

o(){
	files=(*)

	for i in $files
	do
		if [[ $1 == $i ]];
		then
			of $i #full file name match, open regularly
			break
		elif [[ "$(echo $i | grep $1)" != "" ]];
		then
			hit="$i"
		fi
	done

	#no full match!
	if [ -n "$hit" ]; 
	then
		of $hit
	fi

}
of(){
	images="nomacs"
	videos="mpv"
	browser="firefox"

	if [ -f $1 ]; then
		case $1 in
			*.html)     $browser $1 &;;
			*.htm)      $browser $1 &;;

			*.rkt)      drracket $1 &;;
			#*.ipynb)    jupyter-notebook $1 &;;
			*.ipynb)    /snap/bin/code $1 &;;
			*.md)       code $1 &;;
			*.vcd)      gtkwave $1 &;;

			*.png)      $images $1 &;;
			*.jpeg)     $images $1 &;;
			*.jpg)      $images $1 &;;
			*.tiff)     $images $1 &;;

			*.mp4)      $videos $1 &;;
			*.avi)      $videos $1 &;;

			*.zip)      file-roller $1 &;;
			*.pdf)      evince $1 &;;
			*.exe)		wine $1 &;;
			*.docx)     libreoffice $1 &;;
			*)			vim $1;;
		esac
	fi
}

#Filemanagement
duf(){
	du -b --max-depth 1 | sort -nr | perl -pe 's{([0-9]+)}{sprintf "%.1f%s", $1>=2**30? ($1/2**30, "G"): $1>=2**20? ($1/2**20, "M"): $1>=2**10? ($1/2**10, "K"): ($1, "")}e';
}

extract() {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xjf $1     ;;
			*.tar.xz)	 tar xJf $1		;;
			*.tar.gz)    tar xzf $1     ;;
			*.bz2)       bunzip2 $1     ;;
			*.rar)       unrar e $1     ;;
			*.gz)        gunzip $1      ;;
			*.tar)       tar xf $1      ;;
			*.tbz2)      tar xjf $1     ;;
			*.tgz)       tar xzf $1     ;;
			*.zip)       unzip $1       ;;
			*.Z)         uncompress $1  ;;
			*.7z)        7z x $1        ;;
			*)     echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}
#for copying a timeshift snapshot from Ext to Backups drive (not with FFS!)
cpbackup(){
	sudo cp -r /run/media/ar/Ext/timeshift/snapshots/$1 /run/media/ar/Backups/Backup/ext/timeshift/snapshots/
}
#for jumping to last dir opened
rcd(){
tempfile="$(mktemp -t tmp.XXXXXX)"
ranger --choosedir="$tempfile" "${@:-$(pwd)}"
test -f "$tempfile" &&
	if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
		cd -- "$(cat "$tempfile")"
	fi
	rm -f -- "$tempfile"
}
